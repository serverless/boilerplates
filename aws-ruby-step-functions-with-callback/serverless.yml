service: aws-ruby-step-functions-with-callback

frameworkVersion: '2'

provider:
  name: aws
  region: us-east-1
  runtime: ruby2.7
  memorySize: 256
  timeout: 10
  logRetentionInDays: 30
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - states:SendTaskFailure
            - states:SendTaskSuccess
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - comprehend:DetectPiiEntities
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource:
            - !GetAtt Table.Arn
functions:
  check-comment:
    handler: src/handlers/check_comment/handler.run
    environment:
      region: ${self:provider.region}
  redact-comment:
    handler: src/handlers/redact_comment/handler.run
plugins:
  - serverless-ruby-layer
  - serverless-step-functions
custom:
  stateMachineName: workflow-with-callback-${sls:stage}
  tableName: ${self:service}-${sls:stage}
  rubyLayer:
    include_functions:
      - check-comment
      - redact-comment

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        Tags:
          - Key: Application
            Value: ${self:service}
          - Key: Stage
            Value: ${sls:stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

stepFunctions:
  stateMachines:
    WorkflowWithCallback:
      name: ${self:custom.stateMachineName}
      events:
        - http:
            path: comments/add
            method: POST
      definition:
        StartAt: Pass Params
        States:
          Pass Params:
            Type: Pass
            Next: Run Detection
            Parameters:
              comment.$: $.comment
              author.$: $.author
          Run Detection:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
            Parameters:
              FunctionName: 
                Fn::GetAtt: [check-comment, Arn]
              Payload:
                task_token.$: $$.Task.Token
                comment.$: $.comment
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
            ResultPath: $.result
            Next: Is Detection Result
          Is Detection Result:
            Type: Choice
            Choices:
            - Variable: $.result
              StringEquals: No result
              Next: Save to DB
            Default: Redact Comment
          Redact Comment:
            Type: Task
            Resource:
              Fn::GetAtt: [redact-comment, Arn]
            ResultPath: $.comment
            Retry:
            - ErrorEquals:
              - Lambda.ServiceException
              - Lambda.AWSLambdaException
              - Lambda.SdkClientException
              IntervalSeconds: 2
              MaxAttempts: 6
              BackoffRate: 2
            Next: Save to DB
          Save to DB:
            Type: Task
            Resource: arn:aws:states:::dynamodb:putItem
            Parameters:
              TableName: ${self:custom.tableName}
              Item:
                id:
                  S.$: $.author
                comment:
                  S.$: $.comment
            End: true
  validate: true
